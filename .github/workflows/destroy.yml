name: "Destroy build"

on:
  workflow_call:
    inputs:
      target-env:
        required: true
        type: string
        description: "The name of the environment to deploy to"
    secrets:
      DOMAIN_NAME:
        required: true
      AWS_REGION:
        required: true
      AWS_OIDC_ROLE_ARN:
        required: true
      AWS_OIDC_ROLE_SESSION_NAME:
        required: true
      AWS_TFSTATE_BUCKET_NAME:
        required: true
      AWS_TFSTATE_BUCKET_KEY_NAME:
        required: true
      AWS_CREATE_SHARE_LAMBDA_REPO_NAME:
        required: true
      AWS_DOWNLOAD_FILE_LAMBDA_REPO_NAME:
        required: true
      AWS_AUTH_CODE_LAMBDA_REPO_NAME:
        required: true
      AWS_OAUTH_CALLBACK_LAMBDA_REPO_NAME:
        required: true
      AWS_USER_INFO_LAMBDA_REPO_NAME:
        required: true
      AWS_SIGN_OUT_LAMBDA_REPO_NAME:
        required: true

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  destroy:
    runs-on: ubuntu-20.04
    env:
      AWS_TFSTATE_BUCKET_KEY_NAME: "${{ inputs.target-env }}.${{ secrets.AWS_TFSTATE_BUCKET_KEY_NAME }}"
      AWS_CREATE_SHARE_LAMBDA_REPO_NAME: "${{ inputs.target-env }}/${{ secrets.AWS_CREATE_SHARE_LAMBDA_REPO_NAME }}"
      AWS_DOWNLOAD_FILE_LAMBDA_REPO_NAME: "${{ inputs.target-env }}/${{ secrets.AWS_DOWNLOAD_FILE_LAMBDA_REPO_NAME }}"
      AWS_AUTH_CODE_LAMBDA_REPO_NAME: "${{ inputs.target-env }}/${{ secrets.AWS_AUTH_CODE_LAMBDA_REPO_NAME }}"
      AWS_OAUTH_CALLBACK_LAMBDA_REPO_NAME: "${{ inputs.target-env }}/${{ secrets.AWS_OAUTH_CALLBACK_LAMBDA_REPO_NAME }}"
      AWS_USER_INFO_LAMBDA_REPO_NAME: "${{ inputs.target-env }}/${{ secrets.AWS_USER_INFO_LAMBDA_REPO_NAME }}"
      AWS_SIGN_OUT_LAMBDA_REPO_NAME: "${{ inputs.target-env }}/${{ secrets.AWS_SIGN_OUT_LAMBDA_REPO_NAME }}"
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          role-session-name: ${{ secrets.AWS_OIDC_ROLE_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log into Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr

      - name: Initialize Terraform
        id: init
        working-directory: ./terraform/${{ inputs.target-env }}
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_TFSTATE_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ env.AWS_TFSTATE_BUCKET_KEY_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: >
          terraform init -backend-config="bucket=${AWS_BUCKET_NAME}"
          -backend-config="key=${AWS_BUCKET_KEY_NAME}"
          -backend-config="region=${AWS_REGION}"

      - name: Terraform destroy
        working-directory: ./terraform/${{ inputs.target-env }}
        run: terraform destroy -auto-approve -input=false
        env:
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
          TF_VAR_create_share_image_uri: "${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_CREATE_SHARE_LAMBDA_REPO_NAME }}:${{ github.sha }}"
          TF_VAR_create_share_lambda_name: "${{ secrets.AWS_CREATE_SHARE_LAMBDA_REPO_NAME }}"
          TF_VAR_download_file_image_uri: "${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_DOWNLOAD_FILE_LAMBDA_REPO_NAME }}:${{ github.sha }}"
          TF_VAR_download_file_lambda_name: "${{ secrets.AWS_DOWNLOAD_FILE_LAMBDA_REPO_NAME }}"
          TF_VAR_auth_code_image_uri: "${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_AUTH_CODE_LAMBDA_REPO_NAME }}:${{ github.sha }}"
          TF_VAR_auth_code_lambda_name: "${{ secrets.AWS_AUTH_CODE_LAMBDA_REPO_NAME }}"
          TF_VAR_oauth_callback_image_uri: "${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_OAUTH_CALLBACK_LAMBDA_REPO_NAME }}:${{ github.sha }}"
          TF_VAR_oauth_callback_lambda_name: "${{ secrets.AWS_OAUTH_CALLBACK_LAMBDA_REPO_NAME }}"
          TF_VAR_user_info_image_uri: "${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_USER_INFO_LAMBDA_REPO_NAME }}:${{ github.sha }}"
          TF_VAR_user_info_lambda_name: "${{ secrets.AWS_USER_INFO_LAMBDA_REPO_NAME }}"
          TF_VAR_sign_out_image_uri: "${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_SIGN_OUT_LAMBDA_REPO_NAME }}:${{ github.sha }}"
          TF_VAR_sign_out_lambda_name: "${{ secrets.AWS_SIGN_OUT_LAMBDA_REPO_NAME }}"
          TF_VAR_api_gateway_stage_name: "primary"
