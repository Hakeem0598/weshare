name: Deploy workflow

on:
  workflow_call:
    inputs:
      target-env:
        required: true
        type: string
        description: "The name of the environment to deploy to"
    secrets:
      DOMAIN_NAME:
        required: true
      AWS_REGION:
        required: true
      AWS_OIDC_ROLE_ARN:
        required: true
      AWS_OIDC_ROLE_SESSION_NAME:
        required: true
      AWS_TFSTATE_BUCKET_NAME:
        required: true
      AWS_TFSTATE_BUCKET_KEY_NAME:
        required: true
      AWS_CREATE_SHARE_LAMBDA_REPO_NAME:
        required: true
      AWS_DOWNLOAD_FILE_LAMBDA_REPO_NAME:
        required: true
      AWS_AUTH_CODE_LAMBDA_REPO_NAME:
        required: true
      AWS_USER_INFO_LAMBDA_REPO_NAME:
        required: true
      AWS_SIGN_OUT_LAMBDA_REPO_NAME:
        required: true

jobs:
  build-web:
    name: Build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Continuous Integration
        uses: ./.github/actions/ci-setup

      - name: Build Applications
        run: npm run build --workspace web

      - name: Upload web build artifact
        uses: actions/upload-artifact@v3
        with:
          name: web
          path: ./packages/web/dist

  deploy:
    needs: build-web
    name: Deploy to ${{ inputs.target-env }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.target-env }}
    env:
      AWS_TFSTATE_BUCKET_KEY_NAME: "${{ inputs.target-env }}.${{ secrets.AWS_TFSTATE_BUCKET_KEY_NAME }}"
      AWS_CREATE_SHARE_LAMBDA_REPO_NAME: "${{ inputs.target-env }}/${{ secrets.AWS_CREATE_SHARE_LAMBDA_REPO_NAME }}"
      AWS_DOWNLOAD_FILE_LAMBDA_REPO_NAME: "${{ inputs.target-env }}/${{ secrets.AWS_DOWNLOAD_FILE_LAMBDA_REPO_NAME }}"
      AWS_AUTH_CODE_LAMBDA_REPO_NAME: "${{ inputs.target-env }}/${{ secrets.AWS_AUTH_CODE_LAMBDA_REPO_NAME }}"
      AWS_OAUTH_CALLBACK_LAMBDA_REPO_NAME: "${{ inputs.target-env }}/${{ secrets.AWS_OAUTH_CALLBACK_LAMBDA_REPO_NAME }}"
      AWS_USER_INFO_LAMBDA_REPO_NAME: "${{ inputs.target-env }}/${{ secrets.AWS_USER_INFO_LAMBDA_REPO_NAME }}"
      AWS_SIGN_OUT_LAMBDA_REPO_NAME: "${{ inputs.target-env }}/${{ secrets.AWS_SIGN_OUT_LAMBDA_REPO_NAME }}"
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          role-session-name: ${{ secrets.AWS_OIDC_ROLE_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log into Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr

      - name: Create Amazon ECR repository
        uses: int128/create-ecr-repository-action@v1
        with:
          repository: ${{ env.AWS_CREATE_SHARE_LAMBDA_REPO_NAME }}

      - name: Build, tag and push lambda image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.AWS_CREATE_SHARE_LAMBDA_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
          TARGET: ${{ secrets.AWS_CREATE_SHARE_LAMBDA_REPO_NAME }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --target $TARGET ./packages/backend
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Create Amazon ECR repository
        uses: int128/create-ecr-repository-action@v1
        with:
          repository: ${{ env.AWS_DOWNLOAD_FILE_LAMBDA_REPO_NAME }}

      - name: Build, tag and push lambda image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.AWS_DOWNLOAD_FILE_LAMBDA_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
          TARGET: ${{ secrets.AWS_DOWNLOAD_FILE_LAMBDA_REPO_NAME }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --target $TARGET ./packages/backend
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Create Amazon ECR repository
        uses: int128/create-ecr-repository-action@v1
        with:
          repository: ${{ env.AWS_AUTH_CODE_LAMBDA_REPO_NAME }}

      - name: Build, tag and push lambda image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.AWS_AUTH_CODE_LAMBDA_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
          TARGET: ${{ secrets.AWS_AUTH_CODE_LAMBDA_REPO_NAME }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --target $TARGET ./packages/backend
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Create Amazon ECR repository
        uses: int128/create-ecr-repository-action@v1
        with:
          repository: ${{ env.AWS_OAUTH_CALLBACK_LAMBDA_REPO_NAME }}

      - name: Build, tag and push lambda image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.AWS_OAUTH_CALLBACK_LAMBDA_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
          TARGET: ${{ secrets.AWS_OAUTH_CALLBACK_LAMBDA_REPO_NAME }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --target $TARGET ./packages/backend
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Create Amazon ECR repository
        uses: int128/create-ecr-repository-action@v1
        with:
          repository: ${{ env.AWS_USER_INFO_LAMBDA_REPO_NAME }}

      - name: Build, tag and push lambda image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.AWS_USER_INFO_LAMBDA_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
          TARGET: ${{ secrets.AWS_USER_INFO_LAMBDA_REPO_NAME }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --target $TARGET ./packages/backend
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Create Amazon ECR repository
        uses: int128/create-ecr-repository-action@v1
        with:
          repository: ${{ env.AWS_SIGN_OUT_LAMBDA_REPO_NAME }}

      - name: Build, tag and push lambda image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.AWS_SIGN_OUT_LAMBDA_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
          TARGET: ${{ secrets.AWS_SIGN_OUT_LAMBDA_REPO_NAME }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --target $TARGET ./packages/backend
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.4
          terraform_wrapper: false

      - name: Format Terraform files
        id: fmt
        working-directory: ./terraform/${{ inputs.target-env }}
        run: terraform fmt -check
        continue-on-error: true

      - name: Initialize Terraform
        id: init
        working-directory: ./terraform/${{ inputs.target-env }}
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_TFSTATE_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ env.AWS_TFSTATE_BUCKET_KEY_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: >
          terraform init -backend-config="bucket=${AWS_BUCKET_NAME}"
          -backend-config="key=${AWS_BUCKET_KEY_NAME}"
          -backend-config="region=${AWS_REGION}"

      - name: Validate Terraform files
        id: validate
        working-directory: ./terraform/${{ inputs.target-env }}
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color
        working-directory: ./terraform/${{ inputs.target-env }}
        if: github.event_name == 'pull_request'

      - name: Terraform Run
        id: run
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit

      - name: Terraform apply
        working-directory: ./terraform/${{ inputs.target-env }}
        env:
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
          TF_VAR_create_share_image_uri: "${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_CREATE_SHARE_LAMBDA_REPO_NAME }}:${{ github.sha }}"
          TF_VAR_create_share_lambda_name: "${{ secrets.AWS_CREATE_SHARE_LAMBDA_REPO_NAME }}"
          TF_VAR_download_file_image_uri: "${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_DOWNLOAD_FILE_LAMBDA_REPO_NAME }}:${{ github.sha }}"
          TF_VAR_download_file_lambda_name: "${{ secrets.AWS_DOWNLOAD_FILE_LAMBDA_REPO_NAME }}"
          TF_VAR_auth_code_image_uri: "${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_AUTH_CODE_LAMBDA_REPO_NAME }}:${{ github.sha }}"
          TF_VAR_auth_code_lambda_name: "${{ secrets.AWS_AUTH_CODE_LAMBDA_REPO_NAME }}"
          TF_VAR_oauth_callback_image_uri: "${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_OAUTH_CALLBACK_LAMBDA_REPO_NAME }}:${{ github.sha }}"
          TF_VAR_oauth_callback_lambda_name: "${{ secrets.AWS_OAUTH_CALLBACK_LAMBDA_REPO_NAME }}"
          TF_VAR_user_info_image_uri: "${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_USER_INFO_LAMBDA_REPO_NAME }}:${{ github.sha }}"
          TF_VAR_user_info_lambda_name: "${{ secrets.AWS_USER_INFO_LAMBDA_REPO_NAME }}"
          TF_VAR_sign_out_image_uri: "${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_SIGN_OUT_LAMBDA_REPO_NAME }}:${{ github.sha }}"
          TF_VAR_sign_out_lambda_name: "${{ secrets.AWS_SIGN_OUT_LAMBDA_REPO_NAME }}"
          TF_VAR_api_gateway_stage_name: "primary"
        run: terraform apply -auto-approve

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: web
          path: ./dist

      - name: Terraform outputs
        working-directory: ./terraform/${{ inputs.target-env }}
        id: terraform-ouputs
        run: |
          s3bucket=$(terraform output -raw web_bucket)
          distribution=$(terraform output -raw cloudfront_distribution_id)
          echo "s3bucket=${s3bucket}" >> ${GITHUB_OUTPUT}
          echo "distribution=${distribution}" >> ${GITHUB_OUTPUT}
        shell: bash

      - name: Deploy React application to S3
        env:
          s3bucket: ${{ steps.terraform-ouputs.outputs.s3bucket }}
          distribution: ${{ steps.terraform-ouputs.outputs.distribution }}
        run: |
          aws s3 sync dist/ s3://${s3bucket}
          aws cloudfront create-invalidation --distribution-id ${distribution} --paths "/*"
